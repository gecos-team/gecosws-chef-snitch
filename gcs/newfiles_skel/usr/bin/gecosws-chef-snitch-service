#!/usr/bin/env python

# Copyright (C) 2004-2006 Red Hat Inc. <http://www.redhat.com/>
# Copyright (C) 2005-2007 Collabora Ltd. <http://www.collabora.co.uk/>
# Copyright (C) 2014 Junta de Andalucia. <http://www.juntadeandalucia.es/>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import gobject

import dbus
import dbus.service
import dbus.mainloop.glib

DBUS_INTERFACE = 'org.guadalinex.ChefSnitch'
DBUS_PATH = '/org/guadalinex/ChefSnitch'

class ChefSnitch(dbus.service.Object):
    def __init__(self, bus, path):
        dbus.service.Object.__init__(self, bus, path)
        self.isActive = False
        self.lastMessage = ''

    @dbus.service.method(DBUS_INTERFACE, in_signature='', out_signature='b')
    def GetActive(self):
        return self.isActive

    @dbus.service.method(DBUS_INTERFACE, in_signature='b', out_signature='b')
    def SetActive(self, value):
        if (self.isActive != value):
            self.isActive = bool(value)
            self.IsActiveHasChanged()
        return True

    @dbus.service.method(DBUS_INTERFACE, in_signature='s', out_signature='b')
    def NotifyMessage(self, message):
        self.lastMessage = str(message)
        self.MessageNotified()
        return True

    @dbus.service.method(DBUS_INTERFACE, in_signature='', out_signature='s')
    def GetMessage(self):
        return self.lastMessage

    @dbus.service.signal(dbus_interface=DBUS_INTERFACE, signature='')
    def IsActiveHasChanged(self):
        pass

    @dbus.service.signal(dbus_interface=DBUS_INTERFACE, signature='')
    def MessageNotified(self):
        pass

if __name__ == '__main__':
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    system_bus = dbus.SystemBus()
    name = dbus.service.BusName(DBUS_INTERFACE, system_bus)
    object = ChefSnitch(system_bus, DBUS_PATH)

    mainloop = gobject.MainLoop()
    print "GECOS Chef Snitch service is up and running ..."
    mainloop.run()
