#!/usr/bin/env python

# Copyright (C) 2014 Junta de Andalucia. <http://www.juntadeandalucia.es/>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import argparse
import dbus
import sys

from traceback import print_exc

DBUS_INTERFACE = 'org.guadalinex.ChefSnitch'
DBUS_PATH = '/org/guadalinex/ChefSnitch'

def dbus_operation(func):
   def func_wrapper(*args, **kwargs):
       try:
           return func(*args, **kwargs)
       except dbus.DBusException:
            print_exc()
            sys.exit(1)
   return func_wrapper

class ChefSnitchClient(object):
    @dbus_operation
    def __init__(self):
        bus = dbus.SystemBus()
        self.object = bus.get_object(DBUS_INTERFACE, DBUS_PATH)

    @dbus_operation
    def get_active(self):
        value = self.object.GetActive(dbus_interface=DBUS_INTERFACE)
        return str(bool(value)).lower()

    @dbus_operation
    def get_message(self):
        message = self.object.GetMessage(dbus_interface=DBUS_INTERFACE)
        return message

    @dbus_operation
    def set_active(self, input_value):
        value = eval(input_value.capitalize())
        result = self.object.SetActive(value, dbus_interface=DBUS_INTERFACE)
        return result

    @dbus_operation
    def set_message(self, msg):
        result = \
            self.object.NotifyMessage(msg, dbus_interface=DBUS_INTERFACE)
        return result

if __name__ == '__main__':
    app_description = 'GECOS Chef Snitch client.'

    parser = argparse.ArgumentParser(prog='gecosws-chef-snitch-client', \
                                     description=app_description)

    parser.add_argument('--get-active', action='store_true', \
                        help='returns current status, either true or false')

    parser.add_argument('--get-message', action='store_true', \
                        help='returns latest message delivered')

    parser.add_argument('--set-active', \
                        help='set the current value of active', \
                        choices=['true', 'false'])

    parser.add_argument('--set-message', \
                        help='provide a new message (use double quotes)', \
                        type=str, dest='message')

    args = parser.parse_args()

    if not len(sys.argv) > 1:
        parser.print_help()
        sys.exit(0)

    client = ChefSnitchClient()

    if args.get_active:
        print client.get_active()
    elif args.get_message:
        print client.get_message()
    elif args.set_active:
        client.set_active(args.set_active)
    elif args.message:
        client.set_message(args.message)

